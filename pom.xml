<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.5.5</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.solidarychain</groupId>
	<artifactId>citizencardreaderapi</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>citizencardreaderapi</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<!-- Most of the time no additional configuration is needed, everything “just works”, but in some specific cases, we may need to tell spring-boot explicitly what the main class is. One way to do it would be to add a property: -->
		<start-class>com.solidarychain.citizencardreaderapi.Application</start-class>
		<!-- java8 -->
		<!-- <java.version>8</java.version> -->
		<!-- java11 -->
		<java.version>11</java.version>
		<!-- java17 -->
		<!-- <java.version>17</java.version> -->
		<!-- react frontend -->
		<frontend-maven-plugin.version>1.6</frontend-maven-plugin.version>
		<maven-resources-plugin.version>3.1.0</maven-resources-plugin.version>
		<node.version>v14.18.0</node.version>
		<yarn.version>v1.12.1</yarn.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-websocket</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-neo4j</artifactId>
		</dependency>
		<!-- <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency> -->
		<!-- require to use pteidlibj -->
		<dependency>
			<groupId>pt.gov.cartaodecidadao</groupId>
			<artifactId>pteidlibj</artifactId>
			<version>1.0.0</version>
			<scope>system</scope>
			<!-- <systemPath>${basedir}/libs/arm64/pteidlibj.jar</systemPath> -->
			<systemPath>${basedir}/libs/x86_64/pteidlibj.jar</systemPath>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<!-- 
					required for systemd service 
					This makes sure that a MANIFEST.MF file is added to the JAR package.
					This manifest contains a Main-Class entry that specifies which class defines the main method for your application.
					-->
					<executable>true</executable>
					<!-- require to use pteidlibj with java -jar else lib not found problem -->
					<includeSystemScope>true</includeSystemScope>
					<!-- <excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes> -->
					<!-- not require to use pteidlibj -->
					<!-- <environmentVariables>
						<LD_LIBRARY_PATH>/usr/local/lib</LD_LIBRARY_PATH>
					</environmentVariables> -->
					<!-- require to use pteidlibj -->
					<systemPropertyVariables>
						<java.library.path>/usr/local/lib</java.library.path>
					</systemPropertyVariables>
				</configuration>
			</plugin>
			<!--
			The Apache Assembly plugin
			https://blog.frankel.ch/creating-self-contained-executable-jars/#the-spring-boot-plugin 
			-->
			<!-- <plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<configuration>
					<descriptorRefs>
						<descriptorRef>jar-with-dependencies</descriptorRef>
					</descriptorRefs>
					<archive>
						<manifest>
							<mainClass>com.solidarychain.citizencardreaderapi.Application</mainClass>
						</manifest>
					</archive>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>single</goal>
						</goals>
						<phase>package</phase>
					</execution>
				</executions>
			</plugin> -->
			<!--
			The Apache Shade plugin
			https://blog.frankel.ch/creating-self-contained-executable-jars/#the-spring-boot-plugin 
			-->
			<!-- <plugin>
				<artifactId>maven-shade-plugin</artifactId>
				<executions>
					<execution>
						<id>shade</id>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<transformers>
								<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
									<mainClass>com.solidarychain.citizencardreaderapi.Application</mainClass>
									<manifestEntries>
										<Multi-Release>true</Multi-Release>
									</manifestEntries>
								</transformer>
							</transformers>
						</configuration>
					</execution>
				</executions>
			</plugin> -->
			<!-- react frontend -->
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>${maven-resources-plugin.version}</version>
				<executions>
					<execution>
						<id>copy-resources</id>
						<phase>process-classes</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${basedir}/src/main/resources/META-INF/resources</outputDirectory>
							<resources>
								<resource>
									<directory>${project.basedir}/frontend/build</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>com.github.eirslett</groupId>
				<artifactId>frontend-maven-plugin</artifactId>
				<version>${frontend-maven-plugin.version}</version>
				<configuration>
					<workingDirectory>frontend</workingDirectory>
				</configuration>
				<executions>
					<execution>
						<id>install node</id>
						<goals>
							<goal>install-node-and-yarn</goal>
						</goals>
						<configuration>
							<nodeVersion>${node.version}</nodeVersion>
							<yarnVersion>${yarn.version}</yarnVersion>
						</configuration>
					</execution>
					<execution>
						<id>yarn install</id>
						<goals>
							<goal>yarn</goal>
						</goals>
						<phase>generate-resources</phase>
					</execution>
					<!-- <execution>
						<id>yarn test</id>
						<goals>
							<goal>yarn</goal>
						</goals>
						<phase>test</phase>
						<configuration>
							<arguments>test</arguments>
							<environmentVariables>
								<CI>true</CI>
							</environmentVariables>
						</configuration>
					</execution> -->
					<execution>
						<id>yarn build</id>
						<goals>
							<goal>yarn</goal>
						</goals>
						<phase>compile</phase>
						<configuration>
							<arguments>build</arguments>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- <plugin>
				<groupId>com.github.eirslett</groupId>
				<artifactId>frontend-maven-plugin</artifactId>
			</plugin> -->
		</plugins>
	</build>

</project>